import 'package:challenge_liber_quiz/models/module.dart';
import 'package:challenge_liber_quiz/models/question.dart';
import 'package:challenge_liber_quiz/repositories/quiz_repository.dart';

class QuizRepositoryImpl implements QuizRepository {
  // Datos de prueba - en una implementaci√≥n real esto vendr√≠a de una base de datos
  final List<Module> _modules = [
    const Module(
      id: '1',
      name: 'Fundamentos y Prompting',
      description: 'Conceptos b√°sicos de programaci√≥n y prompting efectivo',
      icon: 'üß†',
      questionCount: 5,
    ),
    const Module(
      id: '2',
      name: 'Estructuras de Datos',
      description: 'Arrays, listas, mapas y algoritmos b√°sicos',
      icon: 'üìä',
      questionCount: 5,
    ),
    const Module(
      id: '3',
      name: 'Algoritmos de Ordenamiento',
      description: 'Diferentes algoritmos de ordenamiento y su eficiencia',
      icon: 'üî¢',
      questionCount: 4,
    ),
    const Module(
      id: '4',
      name: 'Programaci√≥n Orientada a Objetos',
      description: 'Conceptos fundamentales de POO',
      icon: 'üèóÔ∏è',
      questionCount: 4,
    ),
    const Module(
      id: '5',
      name: 'Bases de Datos',
      description: 'Conceptos b√°sicos de bases de datos y SQL',
      icon: 'üíæ',
      questionCount: 4,
    ),
  ];

  final List<Question> _questions = [
    // Fundamentos y Prompting (5 preguntas)
    const Question(
      id: '1',
      moduleId: '1',
      questionText: '¬øCu√°l es el prop√≥sito principal del prompting en el desarrollo con IA?',
      options: [
        'Escribir c√≥digo m√°s r√°pido',
        'Comunicar efectivamente con modelos de IA',
        'Debuggear errores autom√°ticamente',
        'Crear interfaces gr√°ficas'
      ],
      correctOptionIndex: 1,
      explanation: 'El prompting efectivo permite comunicarse claramente con modelos de IA para obtener mejores resultados.',
    ),
    const Question(
      id: '2',
      moduleId: '1',
      questionText: '¬øQu√© elemento NO es parte de un buen prompt?',
      options: [
        'Contexto claro',
        'Instrucciones espec√≠ficas',
        'C√≥digo fuente completo',
        'Ejemplos de salida esperada'
      ],
      correctOptionIndex: 2,
      explanation: 'Un buen prompt debe ser conciso. Incluir c√≥digo fuente completo puede confundir al modelo.',
    ),
    const Question(
      id: '3',
      moduleId: '1',
      questionText: '¬øCu√°l es la mejor pr√°ctica para estructurar un prompt complejo?',
      options: [
        'Escribirlo todo en una sola l√≠nea',
        'Dividirlo en secciones con encabezados claros',
        'Usar tantos detalles t√©cnicos como sea posible',
        'Incluir siempre el historial completo de la conversaci√≥n'
      ],
      correctOptionIndex: 1,
      explanation: 'Dividir el prompt en secciones ayuda al modelo a entender mejor la estructura y responder de manera m√°s organizada.',
    ),
    const Question(
      id: '4',
      moduleId: '1',
      questionText: '¬øQu√© tipo de informaci√≥n es m√°s √∫til incluir en un prompt para obtener c√≥digo espec√≠fico?',
      options: [
        'Solo el lenguaje de programaci√≥n',
        'El contexto del problema y ejemplos de entrada/salida',
        'La biograf√≠a del desarrollador',
        'El historial de versiones del proyecto'
      ],
      correctOptionIndex: 1,
      explanation: 'Proporcionar contexto del problema y ejemplos ayuda al modelo a generar c√≥digo m√°s preciso y √∫til.',
    ),
    const Question(
      id: '5',
      moduleId: '1',
      questionText: '¬øPor qu√© es importante ser espec√≠fico en los prompts?',
      options: [
        'Para confundir al modelo',
        'Para obtener respuestas m√°s precisas y √∫tiles',
        'Para hacer el prompt m√°s largo',
        'Para incluir m√°s palabras clave'
      ],
      correctOptionIndex: 1,
      explanation: 'La especificidad ayuda al modelo a entender exactamente lo que necesitas, generando respuestas m√°s precisas.',
    ),

    // Estructuras de Datos (5 preguntas)
    const Question(
      id: '6',
      moduleId: '2',
      questionText: '¬øCu√°l es la diferencia principal entre una Lista y un Map en Dart?',
      options: [
        'La Lista almacena pares clave-valor, el Map almacena elementos ordenados',
        'La Lista almacena elementos ordenados por √≠ndice, el Map por claves',
        'No hay diferencia, son lo mismo',
        'La Lista es inmutable, el Map es mutable'
      ],
      correctOptionIndex: 1,
      explanation: 'Las listas almacenan elementos ordenados por √≠ndice, mientras que los mapas almacenan datos como pares clave-valor.',
    ),
    const Question(
      id: '7',
      moduleId: '2',
      questionText: '¬øCu√°l es la complejidad temporal de acceso a un elemento en un Array?',
      options: [
        'O(1)',
        'O(n)',
        'O(log n)',
        'O(n¬≤)'
      ],
      correctOptionIndex: 0,
      explanation: 'El acceso a un elemento por √≠ndice en un array tiene complejidad O(1) - tiempo constante.',
    ),
    const Question(
      id: '8',
      moduleId: '2',
      questionText: '¬øQu√© estructura de datos es m√°s eficiente para b√∫squedas frecuentes?',
      options: [
        'Lista enlazada',
        'Array',
        'HashMap',
        'Pila'
      ],
      correctOptionIndex: 2,
      explanation: 'Los HashMap ofrecen b√∫squedas en tiempo constante O(1) en promedio.',
    ),
    const Question(
      id: '9',
      moduleId: '2',
      questionText: '¬øCu√°l es la principal ventaja de una lista enlazada sobre un array?',
      options: [
        'Acceso m√°s r√°pido por √≠ndice',
        'Inserci√≥n/eliminaci√≥n eficiente en medio',
        'Menor uso de memoria',
        'B√∫squeda m√°s r√°pida'
      ],
      correctOptionIndex: 1,
      explanation: 'Las listas enlazadas permiten inserciones y eliminaciones eficientes en cualquier posici√≥n.',
    ),
    const Question(
      id: '10',
      moduleId: '2',
      questionText: '¬øQu√© algoritmo de b√∫squeda es m√°s eficiente para arrays ordenados?',
      options: [
        'B√∫squeda lineal',
        'B√∫squeda binaria',
        'B√∫squeda hash',
        'B√∫squeda exponencial'
      ],
      correctOptionIndex: 1,
      explanation: 'La b√∫squeda binaria tiene complejidad O(log n) para arrays ordenados.',
    ),

    // Algoritmos de Ordenamiento (4 preguntas)
    const Question(
      id: '11',
      moduleId: '3',
      questionText: '¬øQu√© algoritmo de ordenamiento tiene mejor rendimiento promedio?',
      options: [
        'Bubble Sort',
        'Insertion Sort',
        'Quick Sort',
        'Selection Sort'
      ],
      correctOptionIndex: 2,
      explanation: 'Quick Sort tiene un rendimiento promedio de O(n log n), mejor que los otros algoritmos mencionados.',
    ),
    const Question(
      id: '12',
      moduleId: '3',
      questionText: '¬øCu√°l es el peor caso de Quick Sort?',
      options: [
        'O(n log n)',
        'O(n¬≤)',
        'O(n)',
        'O(2^n)'
      ],
      correctOptionIndex: 1,
      explanation: 'Quick Sort tiene peor caso O(n¬≤) cuando el pivote est√° mal elegido (array ya ordenado).',
    ),
    const Question(
      id: '13',
      moduleId: '3',
      questionText: '¬øQu√© algoritmo es estable y eficiente para listas peque√±as?',
      options: [
        'Merge Sort',
        'Insertion Sort',
        'Heap Sort',
        'Radix Sort'
      ],
      correctOptionIndex: 1,
      explanation: 'Insertion Sort es estable y muy eficiente para listas peque√±as o casi ordenadas.',
    ),
    const Question(
      id: '14',
      moduleId: '3',
      questionText: '¬øCu√°l algoritmo NO es un algoritmo de ordenamiento por comparaci√≥n?',
      options: [
        'Quick Sort',
        'Merge Sort',
        'Counting Sort',
        'Heap Sort'
      ],
      correctOptionIndex: 2,
      explanation: 'Counting Sort no compara elementos directamente, cuenta ocurrencias para ordenar.',
    ),

    // Programaci√≥n Orientada a Objetos (4 preguntas)
    const Question(
      id: '15',
      moduleId: '4',
      questionText: '¬øCu√°l es el pilar principal de la Programaci√≥n Orientada a Objetos?',
      options: [
        'Herencia',
        'Abstracci√≥n',
        'Polimorfismo',
        'Encapsulamiento'
      ],
      correctOptionIndex: 1,
      explanation: 'La abstracci√≥n es el pilar fundamental que permite modelar objetos del mundo real en c√≥digo.',
    ),
    const Question(
      id: '16',
      moduleId: '4',
      questionText: '¬øQu√© permite el polimorfismo en POO?',
      options: [
        'Crear m√∫ltiples clases',
        'Ocultar informaci√≥n',
        'Tratar objetos de diferentes tipos de manera uniforme',
        'Reutilizar c√≥digo'
      ],
      correctOptionIndex: 2,
      explanation: 'El polimorfismo permite tratar objetos de diferentes clases de manera uniforme a trav√©s de interfaces comunes.',
    ),
    const Question(
      id: '17',
      moduleId: '4',
      questionText: '¬øCu√°l es la diferencia entre composici√≥n y herencia?',
      options: [
        'No hay diferencia',
        'La composici√≥n es "tiene-un", la herencia es "es-un"',
        'La composici√≥n es m√°s lenta',
        'La herencia es m√°s flexible'
      ],
      correctOptionIndex: 1,
      explanation: 'La composici√≥n representa relaciones "tiene-un", mientras que la herencia representa relaciones "es-un".',
    ),
    const Question(
      id: '18',
      moduleId: '4',
      questionText: '¬øQu√© beneficio principal ofrece el encapsulamiento?',
      options: [
        'Mejor rendimiento',
        'Ocultar la implementaci√≥n interna',
        'Facilitar la herencia',
        'Permitir m√∫ltiples instancias'
      ],
      correctOptionIndex: 1,
      explanation: 'El encapsulamiento oculta la implementaci√≥n interna y expone solo lo necesario mediante interfaces p√∫blicas.',
    ),

    // Bases de Datos (4 preguntas)
    const Question(
      id: '19',
      moduleId: '5',
      questionText: '¬øCu√°l es la funci√≥n principal de una clave primaria?',
      options: [
        'Ordenar los datos',
        'Identificar de manera √∫nica cada fila',
        'Mejorar el rendimiento de consultas',
        'Crear relaciones entre tablas'
      ],
      correctOptionIndex: 1,
      explanation: 'La clave primaria identifica de manera √∫nica cada fila en una tabla de la base de datos.',
    ),
    const Question(
      id: '20',
      moduleId: '5',
      questionText: '¬øQu√© tipo de relaci√≥n representa una cardinalidad muchos-a-muchos?',
      options: [
        'Una tabla con una clave for√°nea',
        'Dos tablas con claves for√°neas',
        'Una tabla intermedia con claves for√°neas',
        'Una tabla con clave primaria compuesta'
      ],
      correctOptionIndex: 2,
      explanation: 'Las relaciones muchos-a-muchos requieren una tabla intermedia que contenga las claves for√°neas de ambas tablas.',
    ),
    const Question(
      id: '21',
      moduleId: '5',
      questionText: '¬øCu√°l comando SQL se usa para obtener datos de una tabla?',
      options: [
        'INSERT',
        'UPDATE',
        'SELECT',
        'DELETE'
      ],
      correctOptionIndex: 2,
      explanation: 'El comando SELECT se utiliza para recuperar datos de una o m√°s tablas en la base de datos.',
    ),
    const Question(
      id: '22',
      moduleId: '5',
      questionText: '¬øQu√© es la normalizaci√≥n en bases de datos?',
      options: [
        'Eliminar datos duplicados',
        'Mejorar el rendimiento',
        'Proceso de organizar datos para reducir redundancia',
        'Crear √≠ndices autom√°ticamente'
      ],
      correctOptionIndex: 2,
      explanation: 'La normalizaci√≥n es el proceso de organizar los datos en una base de datos para reducir la redundancia y mejorar la integridad.',
    ),
  ];

  @override
  Future<List<Module>> getModules() async {
    await _simulateDelay();
    return _modules;
  }

  @override
  Future<Module> getModuleById(String id) async {
    await _simulateDelay();
    return _modules.firstWhere((module) => module.id == id);
  }

  @override
  Future<List<Question>> getQuestionsByModule(String moduleId) async {
    await _simulateDelay();
    return _questions.where((question) => question.moduleId == moduleId).toList();
  }

  @override
  Future<Question> getQuestionById(String id) async {
    await _simulateDelay();
    return _questions.firstWhere((question) => question.id == id);
  }

  @override
  Future<List<Question>> getAllQuestions() async {
    await _simulateDelay();
    return _questions;
  }

  @override
  Future<void> addQuestion(Question question) async {
    await _simulateDelay();
    // In a real implementation, this would save to a database
    _questions.add(question);
  }

  @override
  Future<void> updateQuestion(Question question) async {
    await _simulateDelay();
    // In a real implementation, this would update in a database
    final index = _questions.indexWhere((q) => q.id == question.id);
    if (index != -1) {
      _questions[index] = question;
    }
  }

  @override
  Future<void> deleteQuestion(String questionId) async {
    await _simulateDelay();
    // In a real implementation, this would delete from a database
    _questions.removeWhere((question) => question.id == questionId);
  }

  Future<void> _simulateDelay() async {
    // Simulate network delay
    await Future.delayed(const Duration(milliseconds: 300));
  }
}
